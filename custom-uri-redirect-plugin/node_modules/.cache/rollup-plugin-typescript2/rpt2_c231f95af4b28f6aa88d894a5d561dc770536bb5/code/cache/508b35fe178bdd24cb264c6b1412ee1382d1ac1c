{"code":"import { __awaiter } from \"tslib\";\nimport { Plugin, PluginSettingTab, Setting, Notice, Modal, ButtonComponent } from 'obsidian';\nexport default class CustomUriRedirectPlugin extends Plugin {\n    onload() {\n        return __awaiter(this, void 0, void 0, function* () {\n            console.log('Loading Custom URI Redirect Plugin');\n            try {\n                this.registerMarkdownPostProcessor(this.processCustomUriLinks.bind(this));\n            }\n            catch (error) {\n                console.error('Error during Markdown post-processing registration:', error);\n            }\n            if (this.app) {\n                console.log('Adding settings tab');\n                this.addSettingTab(new CustomUriRedirectSettingTab(this.app, this));\n            }\n            this.addCommand({\n                id: 'generate-custom-uri-link',\n                name: 'Generate Custom URI Link',\n                callback: () => {\n                    console.log('Command executed: Generate Custom URI Link');\n                    this.generateLinkForCurrentNote();\n                },\n            });\n            // Add a ribbon icon to the Obsidian UI\n            const ribbonIconEl = this.addRibbonIcon('link', 'Generate Custom URI Link', (evt) => {\n                new LinkGeneratorModal(this.app, this).open();\n            });\n            ribbonIconEl.addClass('custom-uri-redirect-plugin-ribbon');\n        });\n    }\n    onunload() {\n        console.log('Unloading Custom URI Redirect Plugin');\n    }\n    processCustomUriLinks(el, ctx) {\n        console.log('Processing custom URI links');\n        const links = el.querySelectorAll('div a[href^=\"obsidian:\"]');\n        console.log(`Found ${links.length} Obsidian URI links`);\n        links.forEach((link) => {\n            const href = link.getAttribute('href');\n            console.log(`Processing link: ${href}`);\n            if (href) {\n                let notionUrl = '';\n                if (href.startsWith('obsidian://open')) {\n                    const params = new URLSearchParams(href.replace('obsidian://open?', ''));\n                    const vault = params.get('vault');\n                    const file = params.get('file');\n                    if (vault && file) {\n                        notionUrl = `https://jax-baiya.github.io/obsidian-redirect/?path=obsidian-open&vault=${encodeURIComponent(vault)}&file=${encodeURIComponent(file)}`;\n                        console.log(`Generated Notion URL for obsidian://open: ${notionUrl}`);\n                    }\n                }\n                else if (href.startsWith('obsidian://adv-uri')) {\n                    const params = new URLSearchParams(href.replace('obsidian://adv-uri?', ''));\n                    const vault = params.get('vault');\n                    const uid = params.get('uid');\n                    const filepath = params.get('filepath');\n                    if (vault && uid && filepath) {\n                        notionUrl = `https://jax-baiya.github.io/obsidian-redirect/?path=obsidian-adv-uri&vault=${encodeURIComponent(vault)}&uid=${encodeURIComponent(uid)}&filepath=${encodeURIComponent(filepath)}`;\n                        console.log(`Generated Notion URL for obsidian://adv-uri: ${notionUrl}`);\n                    }\n                }\n                if (notionUrl) {\n                    link.setAttribute('href', notionUrl);\n                    link.textContent = `Redirected to: ${notionUrl}`;\n                    console.log(`Converted link to: ${notionUrl}`);\n                }\n            }\n        });\n    }\n    generateLinkForCurrentNote() {\n        return __awaiter(this, void 0, void 0, function* () {\n            console.log('Attempting to generate link for current note');\n            const activeFile = this.app.workspace.getActiveFile();\n            if (activeFile) {\n                const vaultName = this.app.vault.getName();\n                const filePath = activeFile.path;\n                const notionUrl = `https://jax-baiya.github.io/obsidian-redirect/?path=obsidian-open&vault=${encodeURIComponent(vaultName)}&file=${encodeURIComponent(filePath)}`;\n                new Notice(`Generated Link: ${notionUrl}`);\n                console.log(`Generated Link: ${notionUrl}`);\n                yield navigator.clipboard.writeText(notionUrl);\n                new Notice('Link copied to clipboard');\n            }\n            else {\n                new Notice('No active note found to generate the link.');\n                console.log('No active note found to generate the link');\n            }\n        });\n    }\n}\nclass CustomUriRedirectSettingTab extends PluginSettingTab {\n    constructor(app, plugin) {\n        super(app, plugin);\n        this.plugin = plugin;\n    }\n    display() {\n        const { containerEl } = this;\n        containerEl.empty();\n        console.log('Displaying settings for Custom URI Redirect Plugin');\n        containerEl.createEl('h2', { text: 'Settings for Custom URI Redirect Plugin' });\n        new Setting(containerEl)\n            .setName('Redirect Domain')\n            .setDesc('The base domain used for generating redirected links.')\n            .addText((text) => text\n            .setPlaceholder('https://example.com')\n            .setValue('https://jax-baiya.github.io/obsidian-redirect')\n            .onChange((value) => __awaiter(this, void 0, void 0, function* () {\n            console.log(`User changed Redirect Domain to: ${value}`);\n            if (!value.startsWith('https://')) {\n                new Notice('Invalid domain format. Please enter a valid URL starting with https://');\n                console.log('Invalid domain format entered');\n                return;\n            }\n            console.log('Redirect Domain changed to: ', value);\n        })));\n    }\n}\nclass LinkGeneratorModal extends Modal {\n    constructor(app, plugin) {\n        super(app);\n        this.plugin = plugin;\n    }\n    onOpen() {\n        const { contentEl } = this;\n        contentEl.createEl('h2', { text: 'Generate Custom URI Link' });\n        const generateButton = new ButtonComponent(contentEl)\n            .setButtonText('Generate Link')\n            .onClick(() => __awaiter(this, void 0, void 0, function* () {\n            yield this.plugin.generateLinkForCurrentNote();\n            this.close();\n        }));\n        const closeButton = new ButtonComponent(contentEl)\n            .setButtonText('Close')\n            .onClick(() => {\n            this.close();\n        });\n    }\n    onClose() {\n        const { contentEl } = this;\n        contentEl.empty();\n    }\n}\n","references":["/home/An_Xing/projects/Obsidian-Plugins/obsidian-redirect/custom-uri-redirect-plugin/node_modules/obsidian/obsidian.d.ts"]}
