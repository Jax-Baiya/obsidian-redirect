{"code":"import { __awaiter } from \"tslib\";\nimport { Plugin, PluginSettingTab, Setting, Notice, Modal, ButtonComponent, TFile, DropdownComponent } from 'obsidian';\nimport { v4 as uuidv4 } from 'uuid';\nconst DEFAULT_SETTINGS = {\n    redirectDomain: 'https://jax-baiya.github.io/obsidian-redirect',\n    useVaultName: true,\n    useVaultID: false,\n    useNoteName: true,\n    useNoteUID: false,\n    idField: 'uid', // Default idField\n};\nexport default class CustomUriRedirectPlugin extends Plugin {\n    constructor() {\n        super(...arguments);\n        this.settings = DEFAULT_SETTINGS; // Initialize settings\n    }\n    onload() {\n        return __awaiter(this, void 0, void 0, function* () {\n            console.log('Loading Custom URI Redirect Plugin');\n            yield this.loadSettings();\n            try {\n                this.registerMarkdownPostProcessor(this.processCustomUriLinks.bind(this));\n            }\n            catch (error) {\n                console.error('Error during Markdown post-processing registration:', error);\n            }\n            if (this.app) {\n                console.log('Adding settings tab');\n                this.addSettingTab(new CustomUriRedirectSettingTab(this.app, this));\n            }\n            this.addCommand({\n                id: 'generate-custom-uri-link',\n                name: 'Generate Custom URI Link',\n                callback: () => {\n                    console.log('Command executed: Generate Custom URI Link');\n                    new LinkGeneratorModal(this.app, this).open();\n                },\n            });\n            // Add a ribbon icon to the Obsidian UI\n            const ribbonIconEl = this.addRibbonIcon('link', 'Generate Custom URI Link', (evt) => {\n                new LinkGeneratorModal(this.app, this).open();\n            });\n            ribbonIconEl.classList.add('custom-uri-redirect-plugin-ribbon');\n            // Register event to create UID in frontmatter when a new note is created\n            this.registerEvent(this.app.vault.on('create', this.onCreateFile.bind(this)));\n            // Add option to \"More Options\" menu\n            this.registerEvent(this.app.workspace.on('file-menu', (menu, file) => {\n                this.addMoreOptionsMenu(menu, file);\n            }));\n            // Register the URI handler\n            this.registerObsidianProtocolHandler('custom-uri', this.onUriCall.bind(this));\n        });\n    }\n    onunload() {\n        console.log('Unloading Custom URI Redirect Plugin');\n    }\n    loadSettings() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());\n        });\n    }\n    saveSettings() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.saveData(this.settings);\n        });\n    }\n    onCreateFile(file) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!(file instanceof TFile)) {\n                return;\n            }\n            yield this.ensureNoteUID(file);\n        });\n    }\n    ensureNoteUID(file) {\n        return __awaiter(this, void 0, void 0, function* () {\n            var _a;\n            const frontmatter = (_a = this.app.metadataCache.getFileCache(file)) === null || _a === void 0 ? void 0 : _a.frontmatter;\n            const fileContent = yield this.app.vault.read(file);\n            const isYamlEmpty = (!frontmatter || frontmatter.length === 0) &&\n                !fileContent.match(/^-{3}\\s*\\n*\\r*-{3}/);\n            let splitContent = fileContent.split(\"\\n\");\n            const key = `${this.settings.idField}:`;\n            const uid = uuidv4();\n            if (isYamlEmpty) {\n                splitContent.unshift(\"---\");\n                splitContent.unshift(`${key} ${uid}`);\n                splitContent.unshift(\"---\");\n            }\n            else {\n                const lineIndexOfKey = splitContent.findIndex((line) => line.startsWith(key));\n                if (lineIndexOfKey != -1) {\n                    splitContent[lineIndexOfKey] = `${key} ${uid}`;\n                }\n                else {\n                    splitContent.splice(1, 0, `${key} ${uid}`);\n                }\n            }\n            const newFileContent = splitContent.join(\"\\n\");\n            yield this.app.vault.modify(file, newFileContent);\n            return uid;\n        });\n    }\n    processCustomUriLinks(el, ctx) {\n        console.log('Processing custom URI links');\n        const links = el.querySelectorAll('div a[href^=\"obsidian:\"]');\n        console.log(`Found ${links.length} Obsidian URI links`);\n        links.forEach((link) => {\n            const href = link.getAttribute('href');\n            console.log(`Processing link: ${href}`);\n            if (href) {\n                let notionUrl = '';\n                if (href.startsWith('obsidian://open')) {\n                    const params = new URLSearchParams(href.replace('obsidian://open?', ''));\n                    params.set('newpane', 'true'); // Use 'newpane' for Obsidian URIs\n                    const vault = params.get('vault');\n                    const file = params.get('file');\n                    if (vault && file) {\n                        notionUrl = `${this.settings.redirectDomain}/?path=obsidian-open&vault=${encodeURIComponent(vault)}&file=${encodeURIComponent(file)}&newpane=true`;\n                        console.log(`Generated Notion URL for obsidian://open: ${notionUrl}`);\n                    }\n                }\n                else if (href.startsWith('obsidian://adv-uri')) {\n                    const params = new URLSearchParams(href.replace('obsidian://adv-uri?', ''));\n                    params.set('newpane', 'true'); // Use 'newpane' for Obsidian URIs\n                    const vault = params.get('vault');\n                    const uid = params.get('uid');\n                    const filepath = params.get('filepath');\n                    if (vault && uid && filepath) {\n                        notionUrl = `${this.settings.redirectDomain}/?path=obsidian-adv-uri&vault=${encodeURIComponent(vault)}&uid=${encodeURIComponent(uid)}&filepath=${encodeURIComponent(filepath)}&newpane=true`;\n                        console.log(`Generated Notion URL for obsidian://adv-uri: ${notionUrl}`);\n                    }\n                }\n                if (notionUrl) {\n                    link.setAttribute('href', notionUrl);\n                    link.textContent = `Redirected to: ${notionUrl}`;\n                    console.log(`Converted link to: ${notionUrl}`);\n                }\n            }\n        });\n    }\n    generateLinkForCurrentNote(linkFormat) {\n        return __awaiter(this, void 0, void 0, function* () {\n            console.log('Attempting to generate link for current note');\n            const activeFile = this.app.workspace.getActiveFile();\n            if (activeFile) {\n                const vaultName = this.app.vault.getName();\n                const filePath = activeFile.path;\n                const noteUID = yield this.ensureNoteUID(activeFile);\n                const fileName = activeFile.name;\n                let notionUrl = '';\n                if (this.settings.useNoteUID) {\n                    notionUrl = `${this.settings.redirectDomain}/?path=obsidian-open&vault=${encodeURIComponent(vaultName)}&file=${encodeURIComponent(noteUID)}&newpane=true`;\n                }\n                else {\n                    notionUrl = `${this.settings.redirectDomain}/?path=obsidian-open&vault=${encodeURIComponent(vaultName)}&file=${encodeURIComponent(filePath)}&newpane=true`;\n                }\n                if (linkFormat === 'name') {\n                    new Notice(`Generated Link: [${fileName}](${notionUrl})`);\n                    console.log(`Generated Link: [${fileName}](${notionUrl})`);\n                    yield navigator.clipboard.writeText(`[${fileName}](${notionUrl})`);\n                }\n                else {\n                    new Notice(`Generated Link: ${notionUrl}`);\n                    console.log(`Generated Link: ${notionUrl}`);\n                    yield navigator.clipboard.writeText(notionUrl);\n                }\n                new Notice('Link copied to clipboard');\n            }\n            else {\n                new Notice('No active note found to generate the link.');\n                console.log('No active note found to generate the link');\n            }\n        });\n    }\n    addMoreOptionsMenu(menu, file) {\n        menu.addItem((item) => {\n            item.setTitle('Copy Custom URL Link (Note Name)')\n                .setIcon('link')\n                .onClick(() => __awaiter(this, void 0, void 0, function* () {\n                yield this.generateLinkForCurrentNoteWithUID(file, 'name');\n            }));\n        });\n        menu.addItem((item) => {\n            item.setTitle('Copy Custom URL Link (Link)')\n                .setIcon('link')\n                .onClick(() => __awaiter(this, void 0, void 0, function* () {\n                yield this.generateLinkForCurrentNoteWithUID(file, 'link');\n            }));\n        });\n    }\n    generateLinkForCurrentNoteWithUID(file, linkFormat) {\n        return __awaiter(this, void 0, void 0, function* () {\n            console.log('Attempting to generate link for current note with UID');\n            const vaultName = this.app.vault.getName();\n            const filePath = file.path;\n            const noteUID = yield this.ensureNoteUID(file);\n            const fileName = file.name;\n            let notionUrl = '';\n            if (this.settings.useNoteUID) {\n                notionUrl = `${this.settings.redirectDomain}/?path=obsidian-open&vault=${encodeURIComponent(vaultName)}&file=${encodeURIComponent(noteUID)}&newpane=true`;\n            }\n            else {\n                notionUrl = `${this.settings.redirectDomain}/?path=obsidian-open&vault=${encodeURIComponent(vaultName)}&file=${encodeURIComponent(filePath)}&newpane=true`;\n            }\n            if (linkFormat === 'name') {\n                new Notice(`Generated Link: [${fileName}](${notionUrl})`);\n                console.log(`Generated Link: [${fileName}](${notionUrl})`);\n                yield navigator.clipboard.writeText(`[${fileName}](${notionUrl})`);\n            }\n            else {\n                new Notice(`Generated Link: ${notionUrl}`);\n                console.log(`Generated Link: ${notionUrl}`);\n                yield navigator.clipboard.writeText(notionUrl);\n            }\n            new Notice('Link copied to clipboard');\n        });\n    }\n    onUriCall(parameters) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.handleOpen(parameters);\n        });\n    }\n    handleOpen(parameters) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const file = this.app.vault.getAbstractFileByPath(parameters.filepath);\n            if (file instanceof TFile) {\n                const leaf = this.app.workspace.getLeaf(parameters.openInNewPane);\n                yield leaf.openFile(file);\n            }\n        });\n    }\n}\nclass CustomUriRedirectSettingTab extends PluginSettingTab {\n    constructor(app, plugin) {\n        super(app, plugin);\n        this.plugin = plugin;\n    }\n    display() {\n        const { containerEl } = this;\n        containerEl.innerHTML = '';\n        console.log('Displaying settings for Custom URI Redirect Plugin');\n        containerEl.createEl('h2', { text: 'Settings for Custom URI Redirect Plugin' });\n        new Setting(containerEl)\n            .setName('Redirect Domain')\n            .setDesc('The base domain used for generating redirected links.')\n            .addText((text) => text\n            .setPlaceholder('https://example.com')\n            .setValue(this.plugin.settings.redirectDomain)\n            .onChange((value) => __awaiter(this, void 0, void 0, function* () {\n            console.log(`User changed Redirect Domain to: ${value}`);\n            if (!value.startsWith('https://')) {\n                new Notice('Invalid domain format. Please enter a valid URL starting with https://');\n                console.log('Invalid domain format entered');\n                return;\n            }\n            this.plugin.settings.redirectDomain = value;\n            yield this.plugin.saveSettings();\n            console.log('Redirect Domain changed to: ', value);\n        })));\n        new Setting(containerEl)\n            .setName('Use Vault Name')\n            .setDesc('Include the vault name in the generated link.')\n            .addToggle((toggle) => toggle\n            .setValue(this.plugin.settings.useVaultName)\n            .onChange((value) => __awaiter(this, void 0, void 0, function* () {\n            this.plugin.settings.useVaultName = value;\n            yield this.plugin.saveSettings();\n        })));\n        new Setting(containerEl)\n            .setName('Use Vault ID')\n            .setDesc('Include the vault ID in the generated link.')\n            .addToggle((toggle) => toggle\n            .setValue(this.plugin.settings.useVaultID)\n            .onChange((value) => __awaiter(this, void 0, void 0, function* () {\n            this.plugin.settings.useVaultID = value;\n            yield this.plugin.saveSettings();\n        })));\n        new Setting(containerEl)\n            .setName('Use Note Name')\n            .setDesc('Include the note name in the generated link.')\n            .addToggle((toggle) => toggle\n            .setValue(this.plugin.settings.useNoteName)\n            .onChange((value) => __awaiter(this, void 0, void 0, function* () {\n            this.plugin.settings.useNoteName = value;\n            yield this.plugin.saveSettings();\n        })));\n        new Setting(containerEl)\n            .setName('Use Note UID')\n            .setDesc('Include the note UID in the generated link.')\n            .addToggle((toggle) => toggle\n            .setValue(this.plugin.settings.useNoteUID)\n            .onChange((value) => __awaiter(this, void 0, void 0, function* () {\n            this.plugin.settings.useNoteUID = value;\n            yield this.plugin.saveSettings();\n        })));\n    }\n}\nclass LinkGeneratorModal extends Modal {\n    constructor(app, plugin) {\n        super(app);\n        this.plugin = plugin;\n    }\n    onOpen() {\n        const { contentEl } = this;\n        contentEl.createEl('h2', { text: 'Generate Custom URI Link' });\n        const linkFormatDropdown = new DropdownComponent(contentEl);\n        linkFormatDropdown.addOption('name', 'Note Name');\n        linkFormatDropdown.addOption('link', 'Link');\n        linkFormatDropdown.setValue('name');\n        const generateButton = new ButtonComponent(contentEl)\n            .setButtonText('Generate Link')\n            .onClick(() => __awaiter(this, void 0, void 0, function* () {\n            const linkFormat = linkFormatDropdown.getValue();\n            yield this.plugin.generateLinkForCurrentNote(linkFormat);\n            this.close();\n        }));\n        const closeButton = new ButtonComponent(contentEl)\n            .setButtonText('Close')\n            .onClick(() => {\n            this.close();\n        });\n    }\n    onClose() {\n        const contentEl = this.contentEl;\n        contentEl.innerHTML = '';\n    }\n}\n// Usage\nconst myFunction = (el, ctx) => {\n    // Your function implementation\n};\n// someFunctionThatExpectsMarkdownPostProcessorContext(myFunction); // Commented out as the function is not defined\n","references":["/home/An_Xing/projects/Obsidian-Plugins/obsidian-redirect/custom-uri-redirect-plugin/node_modules/@types/uuid/index.d.ts"]}
